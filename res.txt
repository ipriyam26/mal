/Volumes/SSD/Applications/Xcode.app/Contents/Developer/usr/bin/make python_MODE=python -C impls/python step1_read_print.py
make[1]: Nothing to be done for `step1_read_print.py'.
(call STEP_TEST_FILES,python,step1): impls/tests/step1_read_print.mal
----------------------------------------------
Testing test^python^step1; step file: impls/python/step1_read_print.py, test file: tests/step1_read_print.mal
Running: env STEP=step1_read_print MAL_IMPL=js python_MODE=python ../../runtest.py  --deferrable --optional   ../tests/step1_read_print.mal -- ../python/run
Testing read of numbers
TEST: '1' -> ['',1] -> SUCCESS
TEST: '7' -> ['',7] -> SUCCESS
TEST: '  7   ' -> ['',7] -> SUCCESS
TEST: '-123' -> ['',-123] -> SUCCESS
Testing read of symbols
TEST: '+' -> ['',+] -> SUCCESS
TEST: 'abc' -> ['',abc] -> SUCCESS
TEST: '   abc   ' -> ['',abc] -> SUCCESS
TEST: 'abc5' -> ['',abc5] -> SUCCESS
TEST: 'abc-def' -> ['',abc-def] -> SUCCESS
Testing non-numbers starting with a dash.
TEST: '-' -> ['',-] -> SUCCESS
TEST: '-abc' -> ['',-abc] -> SUCCESS
TEST: '->>' -> ['',->>] -> SUCCESS
Testing read of lists
TEST: '(+ 1 2)' -> ['',(+ 1 2)] -> SUCCESS
TEST: '()' -> ['',()] -> SUCCESS
TEST: '( )' -> ['',()] -> SUCCESS
TEST: '(nil)' -> ['',(nil)] -> SUCCESS
TEST: '((3 4))' -> ['',((3 4))] -> SUCCESS
TEST: '(+ 1 (+ 2 3))' -> ['',(+ 1 (+ 2 3))] -> SUCCESS
TEST: '  ( +   1   (+   2 3   )   )  ' -> ['',(+ 1 (+ 2 3))] -> SUCCESS
TEST: '(* 1 2)' -> ['',(* 1 2)] -> SUCCESS
TEST: '(** 1 2)' -> ['',(** 1 2)] -> SUCCESS
TEST: '(* -3 6)' -> ['',(* -3 6)] -> SUCCESS
TEST: '(()())' -> ['',(() ())] -> SUCCESS
Test commas as whitespace
TEST: '(1 2, 3,,,,),,' -> ['',(1 2 3)] -> SUCCESS

-------- Deferrable Functionality --------
Testing read of nil/true/false
TEST: 'nil' -> ['',nil] -> SUCCESS
TEST: 'true' -> ['',true] -> SUCCESS
TEST: 'false' -> ['',false] -> SUCCESS
Testing read of strings
TEST: '"abc"' -> ['',"abc"] -> FAIL (line 76):
    Expected : '.*\n"abc"'
    Got      : '"abc"\n[\'"abc"\']\n\\"abc\\"'
TEST: '   "abc"   ' -> ['',"abc"] -> FAIL (line 78):
    Expected : '.*\n"abc"'
    Got      : '   "abc"   \n[\'"abc"\']\n\\"abc\\"'
TEST: '"abc (with parens)"' -> ['',"abc (with parens)"] -> FAIL (line 80):
    Expected : '.*\n"abc\\ \\(with\\ parens\\)"'
    Got      : '"abc (with parens)"\n[\'"abc (with parens)"\']\n\\"abc (with parens)\\"'
TEST: '"abc\\"def"' -> ['',"abc\"def"] -> FAIL (line 82):
    Expected : '.*\n"abc\\\\"def"'
    Got      : '"abc\\"def"\n[\'"abc\\\\"def"\']\n\\"abc\\\\\\"def\\"'
TEST: '""' -> ['',""] -> FAIL (line 84):
    Expected : '.*\n""'
    Got      : '""\n[\'""\']\n\\"\\"'
TEST: '"\\\\"' -> ['',"\\"] -> FAIL (line 86):
    Expected : '.*\n"\\\\\\\\"'
    Got      : '"\\\\"\n[\'"\\\\\\\\"\']\n\\"\\\\\\\\\\"'
TEST: '"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"' -> ['',"\\\\\\\\\\\\\\\\\\"] -> FAIL (line 88):
    Expected : '.*\n"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"'
    Got      : '"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\n[\'"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\']\n\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"'
TEST: '"&"' -> ['',"&"] -> FAIL (line 90):
    Expected : '.*\n"\\&"'
    Got      : '"&"\n[\'"&"\']\n\\"&\\"'
TEST: '"\'"' -> ['',"'"] -> FAIL (line 92):
    Expected : '.*\n"\'"'
    Got      : '"\'"\n[\'"\\\'"\']\n\\"\'\\"'
TEST: '"("' -> ['',"("] -> FAIL (line 94):
    Expected : '.*\n"\\("'
    Got      : '"("\n[\'"("\']\n\\"(\\"'
TEST: '")"' -> ['',")"] -> FAIL (line 96):
    Expected : '.*\n"\\)"'
    Got      : '")"\n[\'")"\']\n\\")\\"'
TEST: '"*"' -> ['',"*"] -> FAIL (line 98):
    Expected : '.*\n"\\*"'
    Got      : '"*"\n[\'"*"\']\n\\"*\\"'
TEST: '"+"' -> ['',"+"] -> FAIL (line 100):
    Expected : '.*\n"\\+"'
    Got      : '"+"\n[\'"+"\']\n\\"+\\"'
TEST: '","' -> ['',","] -> FAIL (line 102):
    Expected : '.*\n","'
    Got      : '","\n[\'","\']\n\\",\\"'
TEST: '"-"' -> ['',"-"] -> FAIL (line 104):
    Expected : '.*\n"\\-"'
    Got      : '"-"\n[\'"-"\']\n\\"-\\"'
TEST: '"/"' -> ['',"/"] -> FAIL (line 106):
    Expected : '.*\n"/"'
    Got      : '"/"\n[\'"/"\']\n\\"/\\"'
TEST: '":"' -> ['',":"] -> FAIL (line 108):
    Expected : '.*\n":"'
    Got      : '":"\n[\'":"\']\n\\":\\"'
TEST: '";"' -> ['',";"] -> FAIL (line 110):
    Expected : '.*\n";"'
    Got      : '";"\n[\'";"\']\n\\";\\"'
TEST: '"<"' -> ['',"<"] -> FAIL (line 112):
    Expected : '.*\n"<"'
    Got      : '"<"\n[\'"<"\']\n\\"<\\"'
TEST: '"="' -> ['',"="] -> FAIL (line 114):
    Expected : '.*\n"="'
    Got      : '"="\n[\'"="\']\n\\"=\\"'
TEST: '">"' -> ['',">"] -> FAIL (line 116):
    Expected : '.*\n">"'
    Got      : '">"\n[\'">"\']\n\\">\\"'
TEST: '"?"' -> ['',"?"] -> FAIL (line 118):
    Expected : '.*\n"\\?"'
    Got      : '"?"\n[\'"?"\']\n\\"?\\"'
TEST: '"@"' -> ['',"@"] -> FAIL (line 120):
    Expected : '.*\n"@"'
    Got      : '"@"\n[\'"@"\']\n\\"@\\"'
TEST: '"["' -> ['',"["] -> FAIL (line 122):
    Expected : '.*\n"\\["'
    Got      : '"["\n[\'"["\']\n\\"[\\"'
TEST: '"]"' -> ['',"]"] -> FAIL (line 124):
    Expected : '.*\n"\\]"'
    Got      : '"]"\n[\'"]"\']\n\\"]\\"'
TEST: '"^"' -> ['',"^"] -> FAIL (line 126):
    Expected : '.*\n"\\^"'
    Got      : '"^"\n[\'"^"\']\n\\"^\\"'
TEST: '"_"' -> ['',"_"] -> FAIL (line 128):
    Expected : '.*\n"_"'
    Got      : '"_"\n[\'"_"\']\n\\"_\\"'
TEST: '"`"' -> ['',"`"] -> FAIL (line 130):
    Expected : '.*\n"`"'
    Got      : '"`"\n[\'"`"\']\n\\"`\\"'
TEST: '"{"' -> ['',"{"] -> FAIL (line 132):
    Expected : '.*\n"\\{"'
    Got      : '"{"\n[\'"{"\']\n\\"{\\"'
TEST: '"}"' -> ['',"}"] -> FAIL (line 134):
    Expected : '.*\n"\\}"'
    Got      : '"}"\n[\'"}"\']\n\\"}\\"'
TEST: '"~"' -> ['',"~"] -> FAIL (line 136):
    Expected : '.*\n"\\~"'
    Got      : '"~"\n[\'"~"\']\n\\"~\\"'
TEST: '"!"' -> ['',"!"] -> FAIL (line 138):
    Expected : '.*\n"!"'
    Got      : '"!"\n[\'"!"\']\n\\"!\\"'
Testing reader errors
TEST: '(1 2' -> ['.*(EOF|end of input|unbalanced).*',] -> FAIL (line 142):
    Expected : '.*\n.*(EOF|end of input|unbalanced).*'
    Got      : '(1 2\n[\'(\', \'1\', \'2\']\nTraceback (most recent call last):\n  File "../python/step1_read_print.py", line 34, in <module>\n    repl()\n  File "../python/step1_read_print.py", line 21, in repl\n    character = read()\n  File "../python/step1_read_print.py", line 7, in read\n    return reader.read_str(input())\n  File "/Users/ipriyam26/Programing/mal/impls/python/reader.py", line 20, in read_str\n    return read_form(reader)\n  File "/Users/ipriyam26/Programing/mal/impls/python/reader.py", line 52, in read_form\n    return read_list(reader)\n  File "/Users/ipriyam26/Programing/mal/impls/python/reader.py", line 30, in read_list\n    current_tokens.append(read_form(reader))\n  File "/Users/ipriyam26/Programing/mal/impls/python/reader.py", line 56, in read_form\n    return read_atom(reader)\n  File "/Users/ipriyam26/Programing/mal/impls/python/reader.py", line 40, in read_atom\n    return int(token)\nTypeError: int() argument must be a string, a bytes-like object or a number, not \'NoneType\'\n'
TEST: '[1 2' -> ['.*(EOF|end of input|unbalanced).*',] -> FAIL (line 144):
    Expected : '.*\n.*(EOF|end of input|unbalanced).*'
    Got      : "[1 2\n['[', '1', '2']\n["
TEST: '"abc' -> ['.*(EOF|end of input|unbalanced).*',] -> FAIL (line 148):
    Expected : '.*\n.*(EOF|end of input|unbalanced).*'
    Got      : '"abc\n[\'"abc\']\n\\"abc'
TEST: '"' -> ['.*(EOF|end of input|unbalanced).*',] -> FAIL (line 150):
    Expected : '.*\n.*(EOF|end of input|unbalanced).*'
    Got      : '"\n[\'"\']\n\\"'
TEST: '"\\"' -> ['.*(EOF|end of input|unbalanced).*',] -> FAIL (line 152):
    Expected : '.*\n.*(EOF|end of input|unbalanced).*'
    Got      : '"\\"\n[\'"\\\\"\']\n\\"\\\\\\"'
TEST: '"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"' -> ['.*(EOF|end of input|unbalanced).*',] -> FAIL (line 154):
    Expected : '.*\n.*(EOF|end of input|unbalanced).*'
    Got      : '"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\n[\'"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\']\n\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"'
TEST: '(1 "abc' -> ['.*(EOF|end of input|unbalanced).*',] -> FAIL (line 156):
    Expected : '.*\n.*(EOF|end of input|unbalanced).*'
    Got      : '(1 "abc\n[\'(\', \'1\', \'"abc\']\nTraceback (most recent call last):\n  File "../python/step1_read_print.py", line 34, in <module>\n    repl()\n  File "../python/step1_read_print.py", line 21, in repl\n    character = read()\n  File "../python/step1_read_print.py", line 7, in read\n    return reader.read_str(input())\n  File "/Users/ipriyam26/Programing/mal/impls/python/reader.py", line 20, in read_str\n    return read_form(reader)\n  File "/Users/ipriyam26/Programing/mal/impls/python/reader.py", line 52, in read_form\n    return read_list(reader)\n  File "/Users/ipriyam26/Programing/mal/impls/python/reader.py", line 30, in read_list\n    current_tokens.append(read_form(reader))\n  File "/Users/ipriyam26/Programing/mal/impls/python/reader.py", line 56, in read_form\n    return read_atom(reader)\n  File "/Users/ipriyam26/Programing/mal/impls/python/reader.py", line 40, in read_atom\n    return int(token)\nTypeError: int() argument must be a string, a bytes-like object or a number, not \'NoneType\'\n'
TEST: '(1 "abc"' -> ['.*(EOF|end of input|unbalanced).*',] -> FAIL (line 158):
    Expected : '.*\n.*(EOF|end of input|unbalanced).*'
    Got      : '(1 "abc"\n[\'(\', \'1\', \'"abc"\']\nTraceback (most recent call last):\n  File "../python/step1_read_print.py", line 34, in <module>\n    repl()\n  File "../python/step1_read_print.py", line 21, in repl\n    character = read()\n  File "../python/step1_read_print.py", line 7, in read\n    return reader.read_str(input())\n  File "/Users/ipriyam26/Programing/mal/impls/python/reader.py", line 20, in read_str\n    return read_form(reader)\n  File "/Users/ipriyam26/Programing/mal/impls/python/reader.py", line 52, in read_form\n    return read_list(reader)\n  File "/Users/ipriyam26/Programing/mal/impls/python/reader.py", line 30, in read_list\n    current_tokens.append(read_form(reader))\n  File "/Users/ipriyam26/Programing/mal/impls/python/reader.py", line 56, in read_form\n    return read_atom(reader)\n  File "/Users/ipriyam26/Programing/mal/impls/python/reader.py", line 40, in read_atom\n    return int(token)\nTypeError: int() argument must be a string, a bytes-like object or a number, not \'NoneType\'\n'
Testing read of quoting
TEST: "'1" -> ['',(quote 1)] -> FAIL (line 162):
    Expected : '.*\n\\(quote\\ 1\\)'
    Got      : '\'1\n["\'", \'1\']\n\''
TEST: "'(1 2 3)" -> ['',(quote (1 2 3))] -> FAIL (line 164):
    Expected : '.*\n\\(quote\\ \\(1\\ 2\\ 3\\)\\)'
    Got      : '\'(1 2 3)\n["\'", \'(\', \'1\', \'2\', \'3\', \')\']\n\''
TEST: '`1' -> ['',(quasiquote 1)] -> FAIL (line 166):
    Expected : '.*\n\\(quasiquote\\ 1\\)'
    Got      : "`1\n['`', '1']\n`"
TEST: '`(1 2 3)' -> ['',(quasiquote (1 2 3))] -> FAIL (line 168):
    Expected : '.*\n\\(quasiquote\\ \\(1\\ 2\\ 3\\)\\)'
    Got      : "`(1 2 3)\n['`', '(', '1', '2', '3', ')']\n`"
TEST: '~1' -> ['',(unquote 1)] -> FAIL (line 170):
    Expected : '.*\n\\(unquote\\ 1\\)'
    Got      : "~1\n['~', '1']\n~"
TEST: '~(1 2 3)' -> ['',(unquote (1 2 3))] -> FAIL (line 172):
    Expected : '.*\n\\(unquote\\ \\(1\\ 2\\ 3\\)\\)'
    Got      : "~(1 2 3)\n['~', '(', '1', '2', '3', ')']\n~"
TEST: '`(1 ~a 3)' -> ['',(quasiquote (1 (unquote a) 3))] -> FAIL (line 174):
    Expected : '.*\n\\(quasiquote\\ \\(1\\ \\(unquote\\ a\\)\\ 3\\)\\)'
    Got      : "`(1 ~a 3)\n['`', '(', '1', '~', 'a', '3', ')']\n`"
TEST: '~@(1 2 3)' -> ['',(splice-unquote (1 2 3))] -> FAIL (line 176):
    Expected : '.*\n\\(splice\\-unquote\\ \\(1\\ 2\\ 3\\)\\)'
    Got      : "~@(1 2 3)\n['~@', '(', '1', '2', '3', ')']\n~@"
Testing keywords
TEST: ':kw' -> ['',:kw] -> SUCCESS
TEST: '(:kw1 :kw2 :kw3)' -> ['',(:kw1 :kw2 :kw3)] -> SUCCESS
Testing read of vectors
TEST: '[+ 1 2]' -> ['',[+ 1 2]] -> FAIL (line 187):
    Expected : '.*\n\\[\\+\\ 1\\ 2\\]'
    Got      : "[+ 1 2]\n['[', '+', '1', '2', ']']\n["
TEST: '[]' -> ['',[]] -> FAIL (line 189):
    Expected : '.*\n\\[\\]'
    Got      : "[]\n['[', ']']\n["
TEST: '[ ]' -> ['',[]] -> FAIL (line 191):
    Expected : '.*\n\\[\\]'
    Got      : "[ ]\n['[', ']']\n["
TEST: '[[3 4]]' -> ['',[[3 4]]] -> FAIL (line 193):
    Expected : '.*\n\\[\\[3\\ 4\\]\\]'
    Got      : "[[3 4]]\n['[', '[', '3', '4', ']', ']']\n["
TEST: '[+ 1 [+ 2 3]]' -> ['',[+ 1 [+ 2 3]]] -> FAIL (line 195):
    Expected : '.*\n\\[\\+\\ 1\\ \\[\\+\\ 2\\ 3\\]\\]'
    Got      : "[+ 1 [+ 2 3]]\n['[', '+', '1', '[', '+', '2', '3', ']', ']']\n["
TEST: '  [ +   1   [+   2 3   ]   ]  ' -> ['',[+ 1 [+ 2 3]]] -> FAIL (line 197):
    Expected : '.*\n\\[\\+\\ 1\\ \\[\\+\\ 2\\ 3\\]\\]'
    Got      : "  [ +   1   [+   2 3   ]   ]  \n['[', '+', '1', '[', '+', '2', '3', ']', ']']\n["
TEST: '([])' -> ['',([])] -> FAIL (line 199):
    Expected : '.*\n\\(\\[\\]\\)'
    Got      : "([])\n['(', '[', ']', ')']\n([ ])"
Testing read of hash maps
TEST: '{}' -> ['',{}] -> FAIL (line 203):
    Expected : '.*\n\\{\\}'
    Got      : "{}\n['{', '}']\n{"
TEST: '{ }' -> ['',{}] -> FAIL (line 205):
    Expected : '.*\n\\{\\}'
    Got      : "{ }\n['{', '}']\n{"
TEST: '{"abc" 1}' -> ['',{"abc" 1}] -> FAIL (line 207):
    Expected : '.*\n\\{"abc"\\ 1\\}'
    Got      : '{"abc" 1}\n[\'{\', \'"abc"\', \'1\', \'}\']\n{'
TEST: '{"a" {"b" 2}}' -> ['',{"a" {"b" 2}}] -> FAIL (line 209):
    Expected : '.*\n\\{"a"\\ \\{"b"\\ 2\\}\\}'
    Got      : '{"a" {"b" 2}}\n[\'{\', \'"a"\', \'{\', \'"b"\', \'2\', \'}\', \'}\']\n{'
TEST: '{"a" {"b" {"c" 3}}}' -> ['',{"a" {"b" {"c" 3}}}] -> FAIL (line 211):
    Expected : '.*\n\\{"a"\\ \\{"b"\\ \\{"c"\\ 3\\}\\}\\}'
    Got      : '{"a" {"b" {"c" 3}}}\n[\'{\', \'"a"\', \'{\', \'"b"\', \'{\', \'"c"\', \'3\', \'}\', \'}\', \'}\']\n{'
TEST: '{  "a"  {"b"   {  "cde"     3   }  }}' -> ['',{"a" {"b" {"cde" 3}}}] -> FAIL (line 213):
    Expected : '.*\n\\{"a"\\ \\{"b"\\ \\{"cde"\\ 3\\}\\}\\}'
    Got      : '{  "a"  {"b"   {  "cde"     3   }  }}\n[\'{\', \'"a"\', \'{\', \'"b"\', \'{\', \'"cde"\', \'3\', \'}\', \'}\', \'}\']\n{'
TEST: '{"a1" 1 "a2" 2 "a3" 3}' -> ['{"a([1-3])" \\1 "a(?!\\1)([1-3])" \\2 "a(?!\\1)(?!\\2)([1-3])" \\3}',] -> FAIL (line 217):
    Expected : '.*\n{"a([1-3])" \\1 "a(?!\\1)([1-3])" \\2 "a(?!\\1)(?!\\2)([1-3])" \\3}'
    Got      : '{"a1" 1 "a2" 2 "a3" 3}\n[\'{\', \'"a1"\', \'1\', \'"a2"\', \'2\', \'"a3"\', \'3\', \'}\']\n{'
TEST: '{  :a  {:b   {  :cde     3   }  }}' -> ['',{:a {:b {:cde 3}}}] -> FAIL (line 219):
    Expected : '.*\n\\{:a\\ \\{:b\\ \\{:cde\\ 3\\}\\}\\}'
    Got      : "{  :a  {:b   {  :cde     3   }  }}\n['{', ':a', '{', ':b', '{', ':cde', '3', '}', '}', '}']\n{"
TEST: '{"1" 1}' -> ['',{"1" 1}] -> FAIL (line 221):
    Expected : '.*\n\\{"1"\\ 1\\}'
    Got      : '{"1" 1}\n[\'{\', \'"1"\', \'1\', \'}\']\n{'
TEST: '({})' -> ['',({})] -> FAIL (line 223):
    Expected : '.*\n\\(\\{\\}\\)'
    Got      : "({})\n['(', '{', '}', ')']\n({ })"
Testing read of comments
TEST: ' ;; whole line comment (not an exception)' -> ['',] -> SUCCESS (result ignored)
TEST: '1 ; comment after expression' -> ['',1] -> SUCCESS
TEST: '1; comment after expression' -> ['',1] -> SUCCESS
Testing read of @/deref
TEST: '@a' -> ['',(deref a)] -> FAIL (line 234):
    Expected : '.*\n\\(deref\\ a\\)'
    Got      : "@a\n['@', 'a']\n@"

-------- Optional Functionality --------
Testing read of ^/metadata
TEST: '^{"a" 1} [1 2 3]' -> ['',(with-meta [1 2 3] {"a" 1})] -> SOFT FAIL (line 243):
    Expected : '.*\n\\(with\\-meta\\ \\[1\\ 2\\ 3\\]\\ \\{"a"\\ 1\\}\\)'
    Got      : '^{"a" 1} [1 2 3]\n[\'^\', \'{\', \'"a"\', \'1\', \'}\', \'[\', \'1\', \'2\', \'3\', \']\']\n^'
Non alphanumerice characters in strings
TEST: '"\\n"' -> ['',"\n"] -> SOFT FAIL (line 249):
    Expected : '.*\n"\\\\n"'
    Got      : '"\\n"\n[\'"\\\\n"\']\n\\"\\\\n\\"'
TEST: '"#"' -> ['',"#"] -> SOFT FAIL (line 251):
    Expected : '.*\n"\\#"'
    Got      : '"#"\n[\'"#"\']\n\\"#\\"'
TEST: '"$"' -> ['',"$"] -> SOFT FAIL (line 253):
    Expected : '.*\n"\\$"'
    Got      : '"$"\n[\'"$"\']\n\\"$\\"'
TEST: '"%"' -> ['',"%"] -> SOFT FAIL (line 255):
    Expected : '.*\n"%"'
    Got      : '"%"\n[\'"%"\']\n\\"%\\"'
TEST: '"."' -> ['',"."] -> SOFT FAIL (line 257):
    Expected : '.*\n"\\."'
    Got      : '"."\n[\'"."\']\n\\".\\"'
TEST: '"\\\\"' -> ['',"\\"] -> SOFT FAIL (line 259):
    Expected : '.*\n"\\\\\\\\"'
    Got      : '"\\\\"\n[\'"\\\\\\\\"\']\n\\"\\\\\\\\\\"'
TEST: '"|"' -> ['',"|"] -> SOFT FAIL (line 261):
    Expected : '.*\n"\\|"'
    Got      : '"|"\n[\'"|"\']\n\\"|\\"'
Non alphanumeric characters in comments
TEST: '1;!' -> ['',1] -> SUCCESS
TEST: '1;"' -> ['',1] -> SUCCESS
TEST: '1;#' -> ['',1] -> SUCCESS
TEST: '1;$' -> ['',1] -> SUCCESS
TEST: '1;%' -> ['',1] -> SUCCESS
TEST: "1;'" -> ['',1] -> SUCCESS
TEST: '1;\\' -> ['',1] -> SUCCESS
TEST: '1;\\\\' -> ['',1] -> SUCCESS
TEST: '1;\\\\\\' -> ['',1] -> SUCCESS
TEST: '1;`' -> ['',1] -> SUCCESS
TEST: '1; &()*+,-./:;<=>?@[]^_{|}~' -> ['',1] -> SUCCESS

FAILURES:
FAILED TEST (line 76): "abc" -> ['',"abc"]:
    Expected : '.*\n"abc"'
    Got      : '"abc"\n[\'"abc"\']\n\\"abc\\"'
FAILED TEST (line 78):    "abc"    -> ['',"abc"]:
    Expected : '.*\n"abc"'
    Got      : '   "abc"   \n[\'"abc"\']\n\\"abc\\"'
FAILED TEST (line 80): "abc (with parens)" -> ['',"abc (with parens)"]:
    Expected : '.*\n"abc\\ \\(with\\ parens\\)"'
    Got      : '"abc (with parens)"\n[\'"abc (with parens)"\']\n\\"abc (with parens)\\"'
FAILED TEST (line 82): "abc\"def" -> ['',"abc\"def"]:
    Expected : '.*\n"abc\\\\"def"'
    Got      : '"abc\\"def"\n[\'"abc\\\\"def"\']\n\\"abc\\\\\\"def\\"'
FAILED TEST (line 84): "" -> ['',""]:
    Expected : '.*\n""'
    Got      : '""\n[\'""\']\n\\"\\"'
FAILED TEST (line 86): "\\" -> ['',"\\"]:
    Expected : '.*\n"\\\\\\\\"'
    Got      : '"\\\\"\n[\'"\\\\\\\\"\']\n\\"\\\\\\\\\\"'
FAILED TEST (line 88): "\\\\\\\\\\\\\\\\\\" -> ['',"\\\\\\\\\\\\\\\\\\"]:
    Expected : '.*\n"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"'
    Got      : '"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\n[\'"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\']\n\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"'
FAILED TEST (line 90): "&" -> ['',"&"]:
    Expected : '.*\n"\\&"'
    Got      : '"&"\n[\'"&"\']\n\\"&\\"'
FAILED TEST (line 92): "'" -> ['',"'"]:
    Expected : '.*\n"\'"'
    Got      : '"\'"\n[\'"\\\'"\']\n\\"\'\\"'
FAILED TEST (line 94): "(" -> ['',"("]:
    Expected : '.*\n"\\("'
    Got      : '"("\n[\'"("\']\n\\"(\\"'
FAILED TEST (line 96): ")" -> ['',")"]:
    Expected : '.*\n"\\)"'
    Got      : '")"\n[\'")"\']\n\\")\\"'
FAILED TEST (line 98): "*" -> ['',"*"]:
    Expected : '.*\n"\\*"'
    Got      : '"*"\n[\'"*"\']\n\\"*\\"'
FAILED TEST (line 100): "+" -> ['',"+"]:
    Expected : '.*\n"\\+"'
    Got      : '"+"\n[\'"+"\']\n\\"+\\"'
FAILED TEST (line 102): "," -> ['',","]:
    Expected : '.*\n","'
    Got      : '","\n[\'","\']\n\\",\\"'
FAILED TEST (line 104): "-" -> ['',"-"]:
    Expected : '.*\n"\\-"'
    Got      : '"-"\n[\'"-"\']\n\\"-\\"'
FAILED TEST (line 106): "/" -> ['',"/"]:
    Expected : '.*\n"/"'
    Got      : '"/"\n[\'"/"\']\n\\"/\\"'
FAILED TEST (line 108): ":" -> ['',":"]:
    Expected : '.*\n":"'
    Got      : '":"\n[\'":"\']\n\\":\\"'
FAILED TEST (line 110): ";" -> ['',";"]:
    Expected : '.*\n";"'
    Got      : '";"\n[\'";"\']\n\\";\\"'
FAILED TEST (line 112): "<" -> ['',"<"]:
    Expected : '.*\n"<"'
    Got      : '"<"\n[\'"<"\']\n\\"<\\"'
FAILED TEST (line 114): "=" -> ['',"="]:
    Expected : '.*\n"="'
    Got      : '"="\n[\'"="\']\n\\"=\\"'
FAILED TEST (line 116): ">" -> ['',">"]:
    Expected : '.*\n">"'
    Got      : '">"\n[\'">"\']\n\\">\\"'
FAILED TEST (line 118): "?" -> ['',"?"]:
    Expected : '.*\n"\\?"'
    Got      : '"?"\n[\'"?"\']\n\\"?\\"'
FAILED TEST (line 120): "@" -> ['',"@"]:
    Expected : '.*\n"@"'
    Got      : '"@"\n[\'"@"\']\n\\"@\\"'
FAILED TEST (line 122): "[" -> ['',"["]:
    Expected : '.*\n"\\["'
    Got      : '"["\n[\'"["\']\n\\"[\\"'
FAILED TEST (line 124): "]" -> ['',"]"]:
    Expected : '.*\n"\\]"'
    Got      : '"]"\n[\'"]"\']\n\\"]\\"'
FAILED TEST (line 126): "^" -> ['',"^"]:
    Expected : '.*\n"\\^"'
    Got      : '"^"\n[\'"^"\']\n\\"^\\"'
FAILED TEST (line 128): "_" -> ['',"_"]:
    Expected : '.*\n"_"'
    Got      : '"_"\n[\'"_"\']\n\\"_\\"'
FAILED TEST (line 130): "`" -> ['',"`"]:
    Expected : '.*\n"`"'
    Got      : '"`"\n[\'"`"\']\n\\"`\\"'
FAILED TEST (line 132): "{" -> ['',"{"]:
    Expected : '.*\n"\\{"'
    Got      : '"{"\n[\'"{"\']\n\\"{\\"'
FAILED TEST (line 134): "}" -> ['',"}"]:
    Expected : '.*\n"\\}"'
    Got      : '"}"\n[\'"}"\']\n\\"}\\"'
FAILED TEST (line 136): "~" -> ['',"~"]:
    Expected : '.*\n"\\~"'
    Got      : '"~"\n[\'"~"\']\n\\"~\\"'
FAILED TEST (line 138): "!" -> ['',"!"]:
    Expected : '.*\n"!"'
    Got      : '"!"\n[\'"!"\']\n\\"!\\"'
FAILED TEST (line 142): (1 2 -> ['.*(EOF|end of input|unbalanced).*',]:
    Expected : '.*\n.*(EOF|end of input|unbalanced).*'
    Got      : '(1 2\n[\'(\', \'1\', \'2\']\nTraceback (most recent call last):\n  File "../python/step1_read_print.py", line 34, in <module>\n    repl()\n  File "../python/step1_read_print.py", line 21, in repl\n    character = read()\n  File "../python/step1_read_print.py", line 7, in read\n    return reader.read_str(input())\n  File "/Users/ipriyam26/Programing/mal/impls/python/reader.py", line 20, in read_str\n    return read_form(reader)\n  File "/Users/ipriyam26/Programing/mal/impls/python/reader.py", line 52, in read_form\n    return read_list(reader)\n  File "/Users/ipriyam26/Programing/mal/impls/python/reader.py", line 30, in read_list\n    current_tokens.append(read_form(reader))\n  File "/Users/ipriyam26/Programing/mal/impls/python/reader.py", line 56, in read_form\n    return read_atom(reader)\n  File "/Users/ipriyam26/Programing/mal/impls/python/reader.py", line 40, in read_atom\n    return int(token)\nTypeError: int() argument must be a string, a bytes-like object or a number, not \'NoneType\'\n'
FAILED TEST (line 144): [1 2 -> ['.*(EOF|end of input|unbalanced).*',]:
    Expected : '.*\n.*(EOF|end of input|unbalanced).*'
    Got      : "[1 2\n['[', '1', '2']\n["
FAILED TEST (line 148): "abc -> ['.*(EOF|end of input|unbalanced).*',]:
    Expected : '.*\n.*(EOF|end of input|unbalanced).*'
    Got      : '"abc\n[\'"abc\']\n\\"abc'
FAILED TEST (line 150): " -> ['.*(EOF|end of input|unbalanced).*',]:
    Expected : '.*\n.*(EOF|end of input|unbalanced).*'
    Got      : '"\n[\'"\']\n\\"'
FAILED TEST (line 152): "\" -> ['.*(EOF|end of input|unbalanced).*',]:
    Expected : '.*\n.*(EOF|end of input|unbalanced).*'
    Got      : '"\\"\n[\'"\\\\"\']\n\\"\\\\\\"'
FAILED TEST (line 154): "\\\\\\\\\\\\\\\\\\\" -> ['.*(EOF|end of input|unbalanced).*',]:
    Expected : '.*\n.*(EOF|end of input|unbalanced).*'
    Got      : '"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\n[\'"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\']\n\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"'
FAILED TEST (line 156): (1 "abc -> ['.*(EOF|end of input|unbalanced).*',]:
    Expected : '.*\n.*(EOF|end of input|unbalanced).*'
    Got      : '(1 "abc\n[\'(\', \'1\', \'"abc\']\nTraceback (most recent call last):\n  File "../python/step1_read_print.py", line 34, in <module>\n    repl()\n  File "../python/step1_read_print.py", line 21, in repl\n    character = read()\n  File "../python/step1_read_print.py", line 7, in read\n    return reader.read_str(input())\n  File "/Users/ipriyam26/Programing/mal/impls/python/reader.py", line 20, in read_str\n    return read_form(reader)\n  File "/Users/ipriyam26/Programing/mal/impls/python/reader.py", line 52, in read_form\n    return read_list(reader)\n  File "/Users/ipriyam26/Programing/mal/impls/python/reader.py", line 30, in read_list\n    current_tokens.append(read_form(reader))\n  File "/Users/ipriyam26/Programing/mal/impls/python/reader.py", line 56, in read_form\n    return read_atom(reader)\n  File "/Users/ipriyam26/Programing/mal/impls/python/reader.py", line 40, in read_atom\n    return int(token)\nTypeError: int() argument must be a string, a bytes-like object or a number, not \'NoneType\'\n'
FAILED TEST (line 158): (1 "abc" -> ['.*(EOF|end of input|unbalanced).*',]:
    Expected : '.*\n.*(EOF|end of input|unbalanced).*'
    Got      : '(1 "abc"\n[\'(\', \'1\', \'"abc"\']\nTraceback (most recent call last):\n  File "../python/step1_read_print.py", line 34, in <module>\n    repl()\n  File "../python/step1_read_print.py", line 21, in repl\n    character = read()\n  File "../python/step1_read_print.py", line 7, in read\n    return reader.read_str(input())\n  File "/Users/ipriyam26/Programing/mal/impls/python/reader.py", line 20, in read_str\n    return read_form(reader)\n  File "/Users/ipriyam26/Programing/mal/impls/python/reader.py", line 52, in read_form\n    return read_list(reader)\n  File "/Users/ipriyam26/Programing/mal/impls/python/reader.py", line 30, in read_list\n    current_tokens.append(read_form(reader))\n  File "/Users/ipriyam26/Programing/mal/impls/python/reader.py", line 56, in read_form\n    return read_atom(reader)\n  File "/Users/ipriyam26/Programing/mal/impls/python/reader.py", line 40, in read_atom\n    return int(token)\nTypeError: int() argument must be a string, a bytes-like object or a number, not \'NoneType\'\n'
FAILED TEST (line 162): '1 -> ['',(quote 1)]:
    Expected : '.*\n\\(quote\\ 1\\)'
    Got      : '\'1\n["\'", \'1\']\n\''
FAILED TEST (line 164): '(1 2 3) -> ['',(quote (1 2 3))]:
    Expected : '.*\n\\(quote\\ \\(1\\ 2\\ 3\\)\\)'
    Got      : '\'(1 2 3)\n["\'", \'(\', \'1\', \'2\', \'3\', \')\']\n\''
FAILED TEST (line 166): `1 -> ['',(quasiquote 1)]:
    Expected : '.*\n\\(quasiquote\\ 1\\)'
    Got      : "`1\n['`', '1']\n`"
FAILED TEST (line 168): `(1 2 3) -> ['',(quasiquote (1 2 3))]:
    Expected : '.*\n\\(quasiquote\\ \\(1\\ 2\\ 3\\)\\)'
    Got      : "`(1 2 3)\n['`', '(', '1', '2', '3', ')']\n`"
FAILED TEST (line 170): ~1 -> ['',(unquote 1)]:
    Expected : '.*\n\\(unquote\\ 1\\)'
    Got      : "~1\n['~', '1']\n~"
FAILED TEST (line 172): ~(1 2 3) -> ['',(unquote (1 2 3))]:
    Expected : '.*\n\\(unquote\\ \\(1\\ 2\\ 3\\)\\)'
    Got      : "~(1 2 3)\n['~', '(', '1', '2', '3', ')']\n~"
FAILED TEST (line 174): `(1 ~a 3) -> ['',(quasiquote (1 (unquote a) 3))]:
    Expected : '.*\n\\(quasiquote\\ \\(1\\ \\(unquote\\ a\\)\\ 3\\)\\)'
    Got      : "`(1 ~a 3)\n['`', '(', '1', '~', 'a', '3', ')']\n`"
FAILED TEST (line 176): ~@(1 2 3) -> ['',(splice-unquote (1 2 3))]:
    Expected : '.*\n\\(splice\\-unquote\\ \\(1\\ 2\\ 3\\)\\)'
    Got      : "~@(1 2 3)\n['~@', '(', '1', '2', '3', ')']\n~@"
FAILED TEST (line 187): [+ 1 2] -> ['',[+ 1 2]]:
    Expected : '.*\n\\[\\+\\ 1\\ 2\\]'
    Got      : "[+ 1 2]\n['[', '+', '1', '2', ']']\n["
FAILED TEST (line 189): [] -> ['',[]]:
    Expected : '.*\n\\[\\]'
    Got      : "[]\n['[', ']']\n["
FAILED TEST (line 191): [ ] -> ['',[]]:
    Expected : '.*\n\\[\\]'
    Got      : "[ ]\n['[', ']']\n["
FAILED TEST (line 193): [[3 4]] -> ['',[[3 4]]]:
    Expected : '.*\n\\[\\[3\\ 4\\]\\]'
    Got      : "[[3 4]]\n['[', '[', '3', '4', ']', ']']\n["
FAILED TEST (line 195): [+ 1 [+ 2 3]] -> ['',[+ 1 [+ 2 3]]]:
    Expected : '.*\n\\[\\+\\ 1\\ \\[\\+\\ 2\\ 3\\]\\]'
    Got      : "[+ 1 [+ 2 3]]\n['[', '+', '1', '[', '+', '2', '3', ']', ']']\n["
FAILED TEST (line 197):   [ +   1   [+   2 3   ]   ]   -> ['',[+ 1 [+ 2 3]]]:
    Expected : '.*\n\\[\\+\\ 1\\ \\[\\+\\ 2\\ 3\\]\\]'
    Got      : "  [ +   1   [+   2 3   ]   ]  \n['[', '+', '1', '[', '+', '2', '3', ']', ']']\n["
FAILED TEST (line 199): ([]) -> ['',([])]:
    Expected : '.*\n\\(\\[\\]\\)'
    Got      : "([])\n['(', '[', ']', ')']\n([ ])"
FAILED TEST (line 203): {} -> ['',{}]:
    Expected : '.*\n\\{\\}'
    Got      : "{}\n['{', '}']\n{"
FAILED TEST (line 205): { } -> ['',{}]:
    Expected : '.*\n\\{\\}'
    Got      : "{ }\n['{', '}']\n{"
FAILED TEST (line 207): {"abc" 1} -> ['',{"abc" 1}]:
    Expected : '.*\n\\{"abc"\\ 1\\}'
    Got      : '{"abc" 1}\n[\'{\', \'"abc"\', \'1\', \'}\']\n{'
FAILED TEST (line 209): {"a" {"b" 2}} -> ['',{"a" {"b" 2}}]:
    Expected : '.*\n\\{"a"\\ \\{"b"\\ 2\\}\\}'
    Got      : '{"a" {"b" 2}}\n[\'{\', \'"a"\', \'{\', \'"b"\', \'2\', \'}\', \'}\']\n{'
FAILED TEST (line 211): {"a" {"b" {"c" 3}}} -> ['',{"a" {"b" {"c" 3}}}]:
    Expected : '.*\n\\{"a"\\ \\{"b"\\ \\{"c"\\ 3\\}\\}\\}'
    Got      : '{"a" {"b" {"c" 3}}}\n[\'{\', \'"a"\', \'{\', \'"b"\', \'{\', \'"c"\', \'3\', \'}\', \'}\', \'}\']\n{'
FAILED TEST (line 213): {  "a"  {"b"   {  "cde"     3   }  }} -> ['',{"a" {"b" {"cde" 3}}}]:
    Expected : '.*\n\\{"a"\\ \\{"b"\\ \\{"cde"\\ 3\\}\\}\\}'
    Got      : '{  "a"  {"b"   {  "cde"     3   }  }}\n[\'{\', \'"a"\', \'{\', \'"b"\', \'{\', \'"cde"\', \'3\', \'}\', \'}\', \'}\']\n{'
FAILED TEST (line 217): {"a1" 1 "a2" 2 "a3" 3} -> ['{"a([1-3])" \\1 "a(?!\\1)([1-3])" \\2 "a(?!\\1)(?!\\2)([1-3])" \\3}',]:
    Expected : '.*\n{"a([1-3])" \\1 "a(?!\\1)([1-3])" \\2 "a(?!\\1)(?!\\2)([1-3])" \\3}'
    Got      : '{"a1" 1 "a2" 2 "a3" 3}\n[\'{\', \'"a1"\', \'1\', \'"a2"\', \'2\', \'"a3"\', \'3\', \'}\']\n{'
FAILED TEST (line 219): {  :a  {:b   {  :cde     3   }  }} -> ['',{:a {:b {:cde 3}}}]:
    Expected : '.*\n\\{:a\\ \\{:b\\ \\{:cde\\ 3\\}\\}\\}'
    Got      : "{  :a  {:b   {  :cde     3   }  }}\n['{', ':a', '{', ':b', '{', ':cde', '3', '}', '}', '}']\n{"
FAILED TEST (line 221): {"1" 1} -> ['',{"1" 1}]:
    Expected : '.*\n\\{"1"\\ 1\\}'
    Got      : '{"1" 1}\n[\'{\', \'"1"\', \'1\', \'}\']\n{'
FAILED TEST (line 223): ({}) -> ['',({})]:
    Expected : '.*\n\\(\\{\\}\\)'
    Got      : "({})\n['(', '{', '}', ')']\n({ })"
FAILED TEST (line 234): @a -> ['',(deref a)]:
    Expected : '.*\n\\(deref\\ a\\)'
    Got      : "@a\n['@', 'a']\n@"
SOFT FAILED TEST (line 243): ^{"a" 1} [1 2 3] -> ['',(with-meta [1 2 3] {"a" 1})]:
    Expected : '.*\n\\(with\\-meta\\ \\[1\\ 2\\ 3\\]\\ \\{"a"\\ 1\\}\\)'
    Got      : '^{"a" 1} [1 2 3]\n[\'^\', \'{\', \'"a"\', \'1\', \'}\', \'[\', \'1\', \'2\', \'3\', \']\']\n^'
SOFT FAILED TEST (line 249): "\n" -> ['',"\n"]:
    Expected : '.*\n"\\\\n"'
    Got      : '"\\n"\n[\'"\\\\n"\']\n\\"\\\\n\\"'
SOFT FAILED TEST (line 251): "#" -> ['',"#"]:
    Expected : '.*\n"\\#"'
    Got      : '"#"\n[\'"#"\']\n\\"#\\"'
SOFT FAILED TEST (line 253): "$" -> ['',"$"]:
    Expected : '.*\n"\\$"'
    Got      : '"$"\n[\'"$"\']\n\\"$\\"'
SOFT FAILED TEST (line 255): "%" -> ['',"%"]:
    Expected : '.*\n"%"'
    Got      : '"%"\n[\'"%"\']\n\\"%\\"'
SOFT FAILED TEST (line 257): "." -> ['',"."]:
    Expected : '.*\n"\\."'
    Got      : '"."\n[\'"."\']\n\\".\\"'
SOFT FAILED TEST (line 259): "\\" -> ['',"\\"]:
    Expected : '.*\n"\\\\\\\\"'
    Got      : '"\\\\"\n[\'"\\\\\\\\"\']\n\\"\\\\\\\\\\"'
SOFT FAILED TEST (line 261): "|" -> ['',"|"]:
    Expected : '.*\n"\\|"'
    Got      : '"|"\n[\'"|"\']\n\\"|\\"'

TEST RESULTS (for ../tests/step1_read_print.mal):
    8: soft failing tests
   66: failing tests
   43: passing tests
  117: total tests

